searchNodes=[{"doc":"","ref":"Backend.html","title":"Backend","type":"module"},{"doc":"Callback implementation for Application.config_change/3.","ref":"Backend.html#config_change/3","title":"Backend.config_change/3","type":"function"},{"doc":"Callback implementation for Application.start/2.","ref":"Backend.html#start/2","title":"Backend.start/2","type":"function"},{"doc":"","ref":"Backend.Endpoint.html","title":"Backend.Endpoint","type":"module"},{"doc":"Returns all sockets configured in this endpoint.","ref":"Backend.Endpoint.html#__sockets__/0","title":"Backend.Endpoint.__sockets__/0","type":"function"},{"doc":"","ref":"Backend.Endpoint.html#broadcast/3","title":"Backend.Endpoint.broadcast/3","type":"function"},{"doc":"","ref":"Backend.Endpoint.html#broadcast!/3","title":"Backend.Endpoint.broadcast!/3","type":"function"},{"doc":"","ref":"Backend.Endpoint.html#broadcast_from/4","title":"Backend.Endpoint.broadcast_from/4","type":"function"},{"doc":"","ref":"Backend.Endpoint.html#broadcast_from!/4","title":"Backend.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2.","ref":"Backend.Endpoint.html#call/2","title":"Backend.Endpoint.call/2","type":"function"},{"doc":"Returns the endpoint configuration for keyReturns default if the key does not exist.","ref":"Backend.Endpoint.html#config/2","title":"Backend.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"Backend.Endpoint.html#config_change/2","title":"Backend.Endpoint.config_change/2","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"Backend.Endpoint.html#init/1","title":"Backend.Endpoint.init/1","type":"function"},{"doc":"Instruments the given function.event is the event identifier (usually an atom) that specifies which instrumenting function to call in the instrumenter modules. runtime is metadata to be associated with the event at runtime (e.g., the query being issued if the event to instrument is a DB query).Examplesinstrument :render_view, %{view: &quot;index.html&quot;}, fn -&gt; render conn, &quot;index.html&quot; end","ref":"Backend.Endpoint.html#instrument/3","title":"Backend.Endpoint.instrument/3","type":"macro"},{"doc":"Generates the path information when routing to this endpoint.","ref":"Backend.Endpoint.html#path/1","title":"Backend.Endpoint.path/1","type":"function"},{"doc":"Starts the endpoint supervision tree.","ref":"Backend.Endpoint.html#start_link/0","title":"Backend.Endpoint.start_link/0","type":"function"},{"doc":"Generates a route to a static file in priv/static.","ref":"Backend.Endpoint.html#static_path/1","title":"Backend.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information.It uses the configuration under :static_url to generate such. It fallsback to :url if :static_url is not set.","ref":"Backend.Endpoint.html#static_url/0","title":"Backend.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct.It uses the configuration under :url to generate such. Useful for manipulating the url data and passing to URL helpers.","ref":"Backend.Endpoint.html#struct_url/0","title":"Backend.Endpoint.struct_url/0","type":"function"},{"doc":"","ref":"Backend.Endpoint.html#subscribe/1","title":"Backend.Endpoint.subscribe/1","type":"function"},{"doc":"","ref":"Backend.Endpoint.html#subscribe/2","title":"Backend.Endpoint.subscribe/2","type":"function"},{"doc":"","ref":"Backend.Endpoint.html#subscribe/3","title":"Backend.Endpoint.subscribe/3","type":"function"},{"doc":"","ref":"Backend.Endpoint.html#unsubscribe/1","title":"Backend.Endpoint.unsubscribe/1","type":"function"},{"doc":"","ref":"Backend.Endpoint.html#unsubscribe/2","title":"Backend.Endpoint.unsubscribe/2","type":"function"},{"doc":"Generates the endpoint base URL without any path information.It uses the configuration under :url to generate such.","ref":"Backend.Endpoint.html#url/0","title":"Backend.Endpoint.url/0","type":"function"},{"doc":"Conveniences for translating and building error messages.","ref":"Backend.ErrorHelpers.html","title":"Backend.ErrorHelpers","type":"module"},{"doc":"Translates an error message using gettext.","ref":"Backend.ErrorHelpers.html#translate_error/1","title":"Backend.ErrorHelpers.translate_error/1","type":"function"},{"doc":"","ref":"Backend.ErrorView.html","title":"Backend.ErrorView","type":"module"},{"doc":"Returns true whenever the list of templates changes in the filesystem.","ref":"Backend.ErrorView.html#__phoenix_recompile__?/0","title":"Backend.ErrorView.__phoenix_recompile__?/0","type":"function"},{"doc":"The resource name, as an atom, for this view","ref":"Backend.ErrorView.html#__resource__/0","title":"Backend.ErrorView.__resource__/0","type":"function"},{"doc":"Returns the template root alongside all templates.","ref":"Backend.ErrorView.html#__templates__/0","title":"Backend.ErrorView.__templates__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"Backend.ErrorView.html#render/2","title":"Backend.ErrorView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"Backend.ErrorView.html#template_not_found/2","title":"Backend.ErrorView.template_not_found/2","type":"function"},{"doc":"A module providing Internationalization with a gettext-based API.By using Gettext, your module gains a set of macros for translations, for example:import Backend.Gettext # Simple translation gettext &quot;Here is the string to translate&quot; # Plural translation ngettext &quot;Here is the string to translate&quot;, &quot;Here are the strings to translate&quot;, 3 # Domain-based translation dgettext &quot;errors&quot;, &quot;Here is the error message to translate&quot;See the Gettext Docs for detailed usage.","ref":"Backend.Gettext.html","title":"Backend.Gettext","type":"module"},{"doc":"Callback implementation for Gettext.Backend.dgettext/3.","ref":"Backend.Gettext.html#dgettext/3","title":"Backend.Gettext.dgettext/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext/5.","ref":"Backend.Gettext.html#dngettext/5","title":"Backend.Gettext.dngettext/5","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext/2.","ref":"Backend.Gettext.html#gettext/2","title":"Backend.Gettext.gettext/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_bindings/2.","ref":"Backend.Gettext.html#handle_missing_bindings/2","title":"Backend.Gettext.handle_missing_bindings/2","type":"function"},{"doc":"","ref":"Backend.Gettext.html#lgettext/4","title":"Backend.Gettext.lgettext/4","type":"function"},{"doc":"","ref":"Backend.Gettext.html#lngettext/6","title":"Backend.Gettext.lngettext/6","type":"function"},{"doc":"Callback implementation for Gettext.Backend.ngettext/4.","ref":"Backend.Gettext.html#ngettext/4","title":"Backend.Gettext.ngettext/4","type":"macro"},{"doc":"","ref":"Backend.PageController.html","title":"Backend.PageController","type":"module"},{"doc":"Provides presence tracking to channels and processes.See the Phoenix.Presence docs for more details.UsagePresences can be tracked in your channel after joining:defmodule Backend.MyChannel do use Backend.Web, :channel alias Backend.Presence def join(&quot;some:topic&quot;, _params, socket) do send(self, :after_join) {:ok, assign(socket, :user_id, ...)} end def handle_info(:after_join, socket) do {:ok, _} = Presence.track(socket, socket.assigns.user_id, %{ online_at: inspect(System.system_time(:seconds)) }) push socket, &quot;presence_state&quot;, Presence.list(socket) {:noreply, socket} end endIn the example above, Presence.track is used to register this channel's process as a presence for the socket's user ID, with a map of metadata. Next, the current presence list for the socket's topic is pushed to the client as a &quot;presence_state&quot; event.Finally, a diff of presence join and leave events will be sent to the client as they happen in real-time with the &quot;presence_diff&quot; event. See Phoenix.Presence.list/2 for details on the presence datastructure.Fetching Presence InformationThe fetch/2 callback is triggered when using list/1 and serves as a mechanism to fetch presence information a single time, before broadcasting the information to all channel subscribers. This prevents N query problems and gives you a single place to group isolated data fetching to extend presence metadata.The function receives a topic and map of presences and must return a map of data matching the Presence datastructure:%{&quot;123&quot; =&gt; %{metas: [%{status: &quot;away&quot;, phx_ref: ...}], &quot;456&quot; =&gt; %{metas: [%{status: &quot;online&quot;, phx_ref: ...}]}The :metas key must be kept, but you can extend the map of information to include any additional information. For example:def fetch(_topic, entries) do query = from u in User, where: u.id in ^Map.keys(entries), select: {u.id, u} users = query |&gt; Repo.all |&gt; Enum.into(%{}) for {key, %{metas: metas}} &lt;- entries, into: %{} do {key, %{metas: metas, user: users[key]}} end endThe function above fetches all users from the database who have registered presences for the given topic. The fetched information is then extended with a :user key of the user's information, while maintaining the required :metas field from the original presence data.","ref":"Backend.Presence.html","title":"Backend.Presence","type":"module"},{"doc":"Callback implementation for Phoenix.Presence.fetch/2.","ref":"Backend.Presence.html#fetch/2","title":"Backend.Presence.fetch/2","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.handle_diff/2.","ref":"Backend.Presence.html#handle_diff/2","title":"Backend.Presence.handle_diff/2","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.init/1.","ref":"Backend.Presence.html#init/1","title":"Backend.Presence.init/1","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.list/1.","ref":"Backend.Presence.html#list/1","title":"Backend.Presence.list/1","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.start_link/1.","ref":"Backend.Presence.html#start_link/1","title":"Backend.Presence.start_link/1","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.track/3.","ref":"Backend.Presence.html#track/3","title":"Backend.Presence.track/3","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.track/4.","ref":"Backend.Presence.html#track/4","title":"Backend.Presence.track/4","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.untrack/2.","ref":"Backend.Presence.html#untrack/2","title":"Backend.Presence.untrack/2","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.untrack/3.","ref":"Backend.Presence.html#untrack/3","title":"Backend.Presence.untrack/3","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.update/3.","ref":"Backend.Presence.html#update/3","title":"Backend.Presence.update/3","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.update/4.","ref":"Backend.Presence.html#update/4","title":"Backend.Presence.update/4","type":"function"},{"doc":"","ref":"Backend.RoomChannel.html","title":"Backend.RoomChannel","type":"module"},{"doc":"Callback implementation for Phoenix.Channel.code_change/3.","ref":"Backend.RoomChannel.html#code_change/3","title":"Backend.RoomChannel.code_change/3","type":"function"},{"doc":"Callback implementation for Phoenix.Channel.handle_in/3.","ref":"Backend.RoomChannel.html#handle_in/3","title":"Backend.RoomChannel.handle_in/3","type":"function"},{"doc":"Callback implementation for Phoenix.Channel.handle_info/2.","ref":"Backend.RoomChannel.html#handle_info/2","title":"Backend.RoomChannel.handle_info/2","type":"function"},{"doc":"","ref":"Backend.RoomChannel.html#handle_out/3","title":"Backend.RoomChannel.handle_out/3","type":"function"},{"doc":"Callback implementation for Phoenix.Channel.join/3.","ref":"Backend.RoomChannel.html#join/3","title":"Backend.RoomChannel.join/3","type":"function"},{"doc":"Callback implementation for Phoenix.Channel.terminate/2.","ref":"Backend.RoomChannel.html#terminate/2","title":"Backend.RoomChannel.terminate/2","type":"function"},{"doc":"","ref":"Backend.Router.html","title":"Backend.Router","type":"module"},{"doc":"Callback invoked by Plug on every request.","ref":"Backend.Router.html#call/2","title":"Backend.Router.call/2","type":"function"},{"doc":"Callback required by Plug that initializes the router for serving web requests.","ref":"Backend.Router.html#init/1","title":"Backend.Router.init/1","type":"function"},{"doc":"Module with named helpers generated from Backend.Router.","ref":"Backend.Router.Helpers.html","title":"Backend.Router.Helpers","type":"module"},{"doc":"Generates the path information including any necessary prefix.","ref":"Backend.Router.Helpers.html#path/2","title":"Backend.Router.Helpers.path/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"Backend.Router.Helpers.html#static_path/2","title":"Backend.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"Backend.Router.Helpers.html#static_url/2","title":"Backend.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"Backend.Router.Helpers.html#url/1","title":"Backend.Router.Helpers.url/1","type":"function"},{"doc":"","ref":"Backend.UserSocket.html","title":"Backend.UserSocket","type":"module"},{"doc":"Callback implementation for Phoenix.Socket.connect/2.","ref":"Backend.UserSocket.html#connect/2","title":"Backend.UserSocket.connect/2","type":"function"},{"doc":"Callback implementation for Phoenix.Socket.id/1.","ref":"Backend.UserSocket.html#id/1","title":"Backend.UserSocket.id/1","type":"function"},{"doc":"A module that keeps using definitions for controllers, views and so on.This can be used in your application as:use Backend.Web, :controller use Backend.Web, :viewThe definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases.Do NOT define functions inside the quoted expressions below.","ref":"Backend.Web.html","title":"Backend.Web","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"Backend.Web.html#__using__/1","title":"Backend.Web.__using__/1","type":"macro"},{"doc":"","ref":"Backend.Web.html#channel/0","title":"Backend.Web.channel/0","type":"function"},{"doc":"","ref":"Backend.Web.html#controller/0","title":"Backend.Web.controller/0","type":"function"},{"doc":"","ref":"Backend.Web.html#model/0","title":"Backend.Web.model/0","type":"function"},{"doc":"","ref":"Backend.Web.html#router/0","title":"Backend.Web.router/0","type":"function"},{"doc":"","ref":"Backend.Web.html#view/0","title":"Backend.Web.view/0","type":"function"}]